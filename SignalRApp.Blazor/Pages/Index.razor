@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavManager
@implements IAsyncDisposable


<div>
    <div class="from-group">
        <label>
            Count: <input @bind="numberOfCode" />
        </label>
    </div>
    <div class="from-group">
        <label>
            Length: <input @bind="length" />
        </label>
    </div>
    <button @onclick="Send" disabled="@(IsConnected == false)">Request For Codes</button>
    <hr />
    <ul>
        @foreach (string message in codes)
        {
            <li>
                @message
            </li>
        }
    </ul>
</div>
<div>
    <input @bind="discount" />
    <button @onclick="SendCode" disabled="@(IsConnected == false)">Confirm code</button>
    <hr />
    <p>
        @if (codes.Contains(discount))
        {
            <li>
                Code is valid
            </li>
        }
        else
        {
            <li>
                Invalid code supplied
            </li>
        }
    </p>
</div>



@code {
    private HubConnection? hubConnection;
    private List<string> codes = new();
    private ushort? numberOfCode;
    private byte? length;
    private string discount;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavManager.ToAbsoluteUri("/discountHub"))
        .WithAutomaticReconnect().Build();
        hubConnection.On<List<string>>("ReceiveMessage", (codesList) =>
        {
            codes = codesList;
            InvokeAsync(StateHasChanged);
        });
        hubConnection.On<string>("ReceiveMessage", (myDiscount) =>
        {
            discount = myDiscount;
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("GetDiscountCode", numberOfCode, length);
        }
    }

    private async Task SendCode()
    {
        if(hubConnection is not null)
        {
            await hubConnection.InvokeAsync("ConFirmDicountCode", discount);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if(hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

